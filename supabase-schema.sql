-- Parf√ºm AI Database Schema
-- Bu dosyayƒ± Supabase SQL Editor'da √ßalƒ±≈ütƒ±r

-- 1Ô∏è‚É£ RE√áETELER TABLOSU
CREATE TABLE recipes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  ingredients JSONB NOT NULL,
  gender TEXT NOT NULL CHECK (gender IN ('kadƒ±n', 'erkek', 'unisex')),
  season TEXT NOT NULL CHECK (season IN ('ilkbahar', 'yaz', 'sonbahar', 'kƒ±≈ü')),
  dominant_scent TEXT NOT NULL,
  recipe TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

-- 2Ô∏è‚É£ √ñZEL MALZEMELER TABLOSU  
CREATE TABLE custom_ingredients (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('hammade', 'esans')),
  category TEXT NOT NULL DEFAULT '√∂zel',
  description TEXT,
  purpose TEXT,
  is_custom BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

-- 3Ô∏è‚É£ Gƒ∞ZLENEN DEFAULT MALZEMELER TABLOSU
CREATE TABLE hidden_default_ingredients (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  ingredient_id TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  UNIQUE(ingredient_id, user_id)
);

-- 4Ô∏è‚É£ ROW LEVEL SECURITY (RLS) AKTƒ∞VASYONU
ALTER TABLE recipes ENABLE ROW LEVEL SECURITY;
ALTER TABLE custom_ingredients ENABLE ROW LEVEL SECURITY;
ALTER TABLE hidden_default_ingredients ENABLE ROW LEVEL SECURITY;

-- 5Ô∏è‚É£ RLS POLƒ∞Tƒ∞KALARI

-- Recipes tablosu politikalarƒ±
CREATE POLICY "Users can view their own recipes" ON recipes
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own recipes" ON recipes
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own recipes" ON recipes
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own recipes" ON recipes
  FOR DELETE USING (auth.uid() = user_id);

-- Custom ingredients tablosu politikalarƒ±
CREATE POLICY "Users can view their own custom ingredients" ON custom_ingredients
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own custom ingredients" ON custom_ingredients
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own custom ingredients" ON custom_ingredients
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own custom ingredients" ON custom_ingredients
  FOR DELETE USING (auth.uid() = user_id);

-- Hidden ingredients tablosu politikalarƒ±
CREATE POLICY "Users can view their own hidden ingredients" ON hidden_default_ingredients
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own hidden ingredients" ON hidden_default_ingredients
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own hidden ingredients" ON hidden_default_ingredients
  FOR DELETE USING (auth.uid() = user_id);

-- 6Ô∏è‚É£ UPDATED_AT TETƒ∞KLEYƒ∞Cƒ∞Sƒ∞
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER update_recipes_updated_at 
  BEFORE UPDATE ON recipes 
  FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- 7Ô∏è‚É£ ƒ∞NDEKSLER (Performans i√ßin)
CREATE INDEX idx_recipes_user_id ON recipes(user_id);
CREATE INDEX idx_recipes_created_at ON recipes(created_at DESC);
CREATE INDEX idx_custom_ingredients_user_id ON custom_ingredients(user_id);
CREATE INDEX idx_custom_ingredients_type ON custom_ingredients(type);
CREATE INDEX idx_hidden_ingredients_user_id ON hidden_default_ingredients(user_id);

-- 8Ô∏è‚É£ BA≈ûARILI MESAJI
SELECT 'Parf√ºm AI database schema ba≈üarƒ±yla olu≈üturuldu! üéâ' as message; 